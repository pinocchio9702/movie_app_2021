{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","id","title","summary","poster","year","genres","className","src","alt","map","genre","idex","slice","prototype","PropTypes","number","isRequired","string","arrayOf","App","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","medium_cover_image","React","Component","ReactDOM","render","document","getElementById"],"mappings":"+SAKA,SAASA,EAAT,GAA0D,EAA1CC,GAA2C,IAAvCC,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,OAC9C,OACI,sBAAKC,UAAU,QAAf,UACI,qBAAKC,IAAKJ,EAAQK,IAAKP,EAAOA,MAAOA,IACrC,sBAAKK,UAAU,aAAf,UACI,oBAAIA,UAAU,eAAd,SAA8BL,IAC9B,oBAAIK,UAAU,cAAd,SAA6BF,IAC7B,oBAAIE,UAAU,gBAAd,SAA+BD,EAAOI,KAAI,SAACC,EAAMC,GAAP,OACtC,oBAAeL,UAAU,gBAAzB,SAA0CI,GAAjCC,QAEb,oBAAGL,UAAU,iBAAb,UAA+BJ,EAAQU,MAAM,EAAG,KAAhD,eAYhBb,EAAMc,UAAY,CACdb,GAAKc,IAAUC,OAAOC,WACtBf,MAAQa,IAAUG,OAAOD,WACzBd,QAAUY,IAAUG,OAAOD,WAC3Bb,OAASW,IAAUG,OAAOD,WAC1BZ,KAAOU,IAAUC,OAAOC,WACxBX,OAASS,IAAUI,QAAQJ,IAAUG,QAAQD,YAIlCjB,QCwCAoB,G,kNAtEbC,MAAQ,CACNC,WAAY,EACZC,OAAQ,I,EAcVC,U,sBAAY,8BAAAC,EAAA,sEAU+BC,IAAMC,IAAI,yEAVzC,gBAUaJ,EAVb,EAUHK,KAAQA,KAAQL,OAIvB,EAAKM,SAAS,CAACN,SAAQD,WAAY,IAdzB,2C,uDAsBZ,WACEQ,KAAKN,c,oBAGP,WAAQ,MAEwBM,KAAKT,MAA3BC,EAFF,EAEEA,UAAYC,EAFd,EAEcA,OACpB,OAAQ,yBAAShB,UAAU,YAAnB,SACLe,EACE,qBAAKf,UAAU,SAAf,SACC,sBAAMA,UAAU,eAAhB,0BAGF,qBAAKA,UAAU,SAAf,SACGgB,EAAOb,KAAI,SAAAa,GAAM,OAClB,cAAC,EAAD,CAEAtB,GAAIsB,EAAOtB,GACXC,MAAOqB,EAAOrB,MACdC,QAAWoB,EAAOpB,QAClBC,OAAUmB,EAAOQ,mBACjB1B,KAAQkB,EAAOlB,KACfC,OAAUiB,EAAOjB,QANZiB,EAAOtB,e,GAvDJ+B,IAAMC,YCAxBC,IAASC,OAAQ,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.92248b12.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Movie.css\";\n\n\nfunction Movie({id, title, summary, poster, year, genres}){\n    return (\n        <div className=\"movie\">\n            <img src={poster} alt={title} title={title}></img>\n            <div className=\"movie_date\">\n                <h3 className=\"movie__title\">{title}</h3>\n                <h5 className=\"movie__year\">{year}</h5>\n                <ul className=\"movie__genres\">{genres.map((genre,idex) => (\n                    <li key={idex} className=\"genres__genre\">{genre}</li>\n                ))}</ul>\n                <p className=\"movie__summary\">{summary.slice(0, 140)}...</p>\n            </div>\n        </div>\n    )\n}\n\n/*\nfunction Movie(){\n    return <h4>안녕</h4>\n}\n*/\n\nMovie.prototype = {\n    id : PropTypes.number.isRequired,\n    title : PropTypes.string.isRequired,\n    summary : PropTypes.string.isRequired,\n    poster : PropTypes.string.isRequired,\n    year : PropTypes.number.isRequired,\n    genres : PropTypes.arrayOf(PropTypes.string).isRequired\n\n}\n\nexport default Movie;","import React from 'react';\n//import PropTypes from \"prop-types\";\nimport axios from 'axios';\nimport Movie from './Movie';\nimport \"./App.css\";\n\nclass App extends React.Component{\n  state = {\n    isLoading : true,\n    movies: []\n  };\n  /*\n    axios.get은 매우 느린 작업이다. 하지만 프로그램의 시작을 위해서는 이 느린 작업을 기다려야 한다.\n    리액트는 본래 이 작업을 기다리지 않고 다른 일을 먼저 수행한다.\n    하지만 async(비동기) 를 사용하게 되면 그 작업이 끝나기 전까지 기다렸다가 수행하게 된다.\n  */\n  /*\n  async getMovies(){\n   const movies = await axios.get('https://yts-proxy.nomadcoders1.now.sh/list_movies.json ');\n  }\n */\n\n  //람다식의 익숙해 져야함\n  getMovies = async() =>{\n    /*\n    JSON형태의 URL을 통해 데이터를 가져올 수 있는 라이브러리 axios\n    */\n   /*\n    const movies = await axios.get('https://yts-proxy.nomadcoders1.now.sh/list_movies.json');\n    console.log(movies.data.data.movies);\n    */\n    //ES6 버전\n    //json의 형태를 조금 더 편하게 변경시켜 준다.\n    const {data : {data : {movies}}} = await axios.get('https://yts-proxy.nomadcoders1.now.sh/list_movies.json?sort_by=rating')\n    //console.log(movies);\n    //위나 아래나 똑같이 작동함\n    //this.setState({moives : movie});\n    this.setState({movies, isLoading : false});\n\n    /*\n    axios 로 json데이터를 가져오고 await로 인해 비동기화 되어 작업이 끝날때 까지 기다렸다가 setState로 isLoading 이 false가 된다. \n    */\n\n  }\n\n  componentDidMount(){\n    this.getMovies();\n  }\n\n  render(){\n    //isLoading을 이곳에 선언하지 않으면 밑에 this.state.isLoading으로 작성해야 한다.\n    const { isLoading , movies} = this.state;\n    return (<section className=\"container\">\n      {isLoading ? \n        (<div className=\"loader\">\n          <span className=\"loader__text\">Loading...</span>\n        </div> \n      ) : (\n        <div className=\"movies\">\n          {movies.map(movies => (\n          <Movie \n          key={movies.id}\n          id={movies.id}\n          title={movies.title}\n          summary = {movies.summary}\n          poster = {movies.medium_cover_image}\n          year = {movies.year}\n          genres = {movies.genres}\n          />\n      ))}\n        </div>\n      )}\n    </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\n\nReactDOM.render( <App />, document.getElementById('root'));\n"],"sourceRoot":""}